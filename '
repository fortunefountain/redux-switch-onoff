import {
  AnyAction,
  configureStore,
  createSlice,
  ThunkAction,
} from "@reduxjs/toolkit";

export type SwitchState = {
  isOn: boolean;
};

const initialState: SwitchState = {
  isOn: false,
};

type SwitchThunkAction = ThunkAction<void, SwitchState, null, AnyAction>;

const slice = createSlice({
  name: "store",
  initialState: initialState,
  reducers: {
    switchOn: (state) => {
      state.isOn = true;
    },
    switchOff: (state) => {
      state.isOn = false;
    },
  },
});

export const { switchOn, switchOff } = slice.actions;

export const swithOnAction = (): SwitchThunkAction => (dispatch) => {
  dispatch(switchOn());
};
export const switchOffAction = (): SwitchThunkAction => (dispatch) => {
  dispatch(switchOff());
};

const reducer = slice.reducer;

const saveStateToLocalStorage = (state: SwitchState) => {
  try {
    const serializedState = JSON.stringify(state);
    localStorage.setItem("state", serializedState);
  } catch (e) {
    console.log(e);
  }
};

const loadFromLocalStorage = () => {
  const localStorageValue = localStorage.getItem("isOn");
  if (localStorageValue) {
    return JSON.parse(localStorageValue) as SwitchState;
  }
  return initialState;
};

export const store = configureStore<SwitchState, AnyAction>({
  reducer: reducer,
  devTools: true,
  preloadedState: loadFromLocalStorage(),
});

store.subscribe(() => {
  saveStateToLocalStorage(store.getState());
});

export const appDispatcher = store.dispatch;
